package uo.mp.collections.testcases;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

import uo.mp.collections.List;
import uo.mp.collections.impl.ArrayList;
import uo.mp.collections.impl.LinkedList;
import uo.mp.collections.setting.Settings;

public class EqualsTests<T> {
	

	/*
	 * Casos:
	 * 1 Dos listas vacías de tipo ArrayList son iguales
	 * 2 Dos lisa vacías de tipo LinkedList son iguales
	 * 3 Dos listas vacías de ambos tipos son iguales
	 * 4 Dos listas de tipo ArrayList con los mismos elementos en la misma posición son iguales
	 * 5 Dos listas de tipo LinkedList con los mismos elementos en la misma posición son iguales
	 * 6 Dos listas de ambos tipos con los mismsos elementos en la misa posición son iguales
	 * 7 Dos listas de tipo ArrayList con los mismos elementos en diferente posición no son iguales
	 * 8 Dos listas de tipo LinkedList con los mismos elementos endiferentes posiciones no sn iguales
	 * 9 Dos listas de ambos tipos con los mismos elementos en diferentes posiciones no son iguales
	 * 10 Dos listas de tipo ArrayList con diferentes elementos no son iguales
	 * 11 Dos listas de tipo LinkedList con diferentes elementos no son iguales
	 * 12 Dos listas de ambos tipos con diferentes elementos no son iguales
	 */
	
	@Before
	public void setUp() throws Exception {
		Settings.factory.newList();
	}

	/**
	 * Given: Dos listas vacías de tipo ArrayList
	 * When: se invoca al método
	 * Then: sale que son iguales.
	 */
	@Test
	public void testEqualsEmpty1() {
		ArrayList<T> al1 = new ArrayList<T>();
		ArrayList<T> al2 = new ArrayList<T>();
		assertTrue(al1.equals(al2));
	}
	
	/**
	 * Given: Dos listas vacías de tipo LinkedList
	 * When: se invoca al método
	 * Then: sale que son iguales.
	 */
	@Test
	public void testEquals2() {
		LinkedList ll1 = new LinkedList();
		LinkedList ll2 = new LinkedList();
		assertTrue(ll1.equals(ll2));
	}
	
	/**
	 * Given: Dos listas vacías de ambos tipos.
	 * When: se invoca al método
	 * Then: sale que son iguales.
	 */
	@Test
	public void testEqualsEmpty3() {
		List al1 = new ArrayList();
		List ll1 = new LinkedList();
		assertTrue(ll1.equals(al1));
	}
	
	/**
	 * Given: Dos listas de tipo ArrayList con los mismos objetos
	 * When: se invoca al método
	 * Then: sale que son iguales.
	 */
	@Test
	public void testEqualsWithElements1() {
		ArrayList al1 = new ArrayList();
		ArrayList al2 = new ArrayList();
		
		Object obj1 = new Object();
		Object obj2 = new Object();
		
		al1.add(obj1);
		al1.add(obj2);
		al2.add(obj1);
		al2.add(obj2);
		
		assertTrue(al1.equals(al2));
	}
	
	/**
	 * Given: Dos listas de tipo LinkedList con los mismos elementos
	 * When: se invoca al método
	 * Then: sale que son iguales.
	 */
	@Test
	public void testEqualsWithElements2() {
		LinkedList ll1 = new LinkedList();
		LinkedList ll2 = new LinkedList();
		
		Object obj1 = new Object();
		Object obj2 = new Object();
		
		ll1.add(obj1);
		ll1.add(obj2);
		ll2.add(obj1);
		ll2.add(obj2);
		
		assertTrue(ll1.equals(ll2));
	}
	
	/**
	 * Given: Dos listas de ambos tipos con los mismos elementos.
	 * When: se invoca al método
	 * Then: sale que son iguales.
	 */
	@Test
	public void testEqualsWithElements3() {
		ArrayList al1 = new ArrayList();
		LinkedList ll1 = new LinkedList();
		
		Object obj1 = new Object();
		Object obj2 = new Object();
		
		ll1.add(obj1);
		ll1.add(obj2);
		al1.add(obj1);
		al1.add(obj2);
		
		assertTrue(ll1.equals(al1));
	}

	/**
	 * Given: Dos listas de tipo ArrayList con los mismos objetos pero en 
	 * distinta posición.
	 * When: se invoca al método
	 * Then: sale que no son iguales.
	 */
	@Test
	public void testEqualsWithElementsButDifPos1() {
		ArrayList al1 = new ArrayList();
		ArrayList al2 = new ArrayList();
		
		Object obj1 = new Object();
		Object obj2 = new Object();
		
		al1.add(obj1);
		al1.add(obj2);
		al2.add(obj2);
		al2.add(obj1);
		
		assertFalse(al1.equals(al2));
	}
	
	/**
	 * Given: Dos listas de tipo LinkedList con los mismos elementos pero en 
	 * distinta posición.
	 * When: se invoca al método
	 * Then: sale que no son iguales.
	 */
	@Test
	public void testEqualsWithElementsButDifPos2() {
		LinkedList ll1 = new LinkedList();
		LinkedList ll2 = new LinkedList();
		
		Object obj1 = new Object();
		Object obj2 = new Object();
		
		ll1.add(obj1);
		ll1.add(obj2);
		ll2.add(obj2);
		ll2.add(obj1);
		
		assertFalse(ll1.equals(ll2));
	}
	
	/**
	 * Given: Dos listas de ambos tipos con los mismos elementos pero en 
	 * distinta posición.
	 * When: se invoca al método
	 * Then: sale que no son iguales.
	 */
	@Test
	public void testEqualsWithElementsButDifPos3() {
		ArrayList al1 = new ArrayList();
		LinkedList ll1 = new LinkedList();
		
		Object obj1 = new Object();
		Object obj2 = new Object();
		
		ll1.add(obj1);
		ll1.add(obj2);
		al1.add(obj2);
		al1.add(obj1);
		
		assertFalse(ll1.equals(al1));
	}
	
	/**
	 * Given: Dos Arralists de con distintos elementos 
	 * distinta posición.
	 * When: se invoca al método
	 * Then: sale que no son iguales.
	 */
	@Test
	public void testEqualsWithDifElements1() {
		ArrayList al1 = new ArrayList();
		ArrayList al2 = new ArrayList();
		
		al1.add("A");
		al2.add("B");
		
		assertFalse(al2.equals(al1));
	}
	
	/**
	* GIVEN: UNA LISTA DE ARRAY UNA LINKED CON DIFERENTES ELEMENTOS
	* WHEN: SE INVOCA AL METODO
	* THEN: NO SON IGUALES
	*/
	@Test
	public void testEqualsWithDifElements2() {
	ArrayList al1 = new ArrayList();
	LinkedList ll1 = new LinkedList();

	Object obj1 = new Object();
	Object obj2 = new Object();




	ll1.add(obj1);
	ll1.add(obj2);
	al1.add(obj2);
	al1.add(obj1);

	assertFalse(ll1.equals(al1));
	}

	/**
	* GIVEN: DOS LISTAS DE LINKED CON DIFERENTES ELEMENTOS
	* WHEN: SE INVOCA AL METODO
	* THEN: NO SON IGUALES
	*/
	@Test
	public void testEqualsWithDifElements3() {
	LinkedList al1 = new LinkedList();
	LinkedList ll1 = new LinkedList();

	Object obj1 = new Object();
	Object obj2 = new Object();




	ll1.add(obj1);
	ll1.add(obj2);
	al1.add(obj2);
	al1.add(obj1);

	assertFalse(ll1.equals(al1));
	}
	
}

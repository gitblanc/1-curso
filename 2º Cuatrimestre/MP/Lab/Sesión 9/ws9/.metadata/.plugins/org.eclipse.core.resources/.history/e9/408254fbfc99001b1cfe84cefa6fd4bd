package uo.mp.newsstand.ui;

import uo.mp.newsstand.domain.Magazine;
import uo.mp.newsstand.domain.Newspaper;
import uo.mp.newsstand.domain.Publication;
import uo.mp.newsstand.ui.console.Console;

/**
 * Asks the user all the data for a new publication.
 * 
 */
public class PublicationForm {

	/**
	 * @return The new Publication object created. It will be be of any of the child
	 *         types of Publication.
	 * @throws ApplicationException 
	 */
	public Publication askForPublication() {
		String type = Console.readString("Type of publication? (n | m)");
		type = type.toLowerCase();
		switch (type) {
			case "n": return askForNewsPaper();
			case "m": return askForMagazine();
			default:  return null;
		}

	}
	
	private String tryAgainType(String type) {
		do {
			type = Console.readString("Type of publication? (n | m)").toLowerCase();
		} while (type != "n" && type != "m");
		return type;
	}

	private Publication askForMagazine() throws ApplicationException {
		String name = Console.readString("name?");// cadena
		if (name.isBlank()) {
			tryAgainName(name);
			throw new ApplicationException("Cadena vacía");
		}

		int stock = Console.readInteger("stock?");// stock
		if (!isValidStock(stock)) {
			tryAgainStock(stock);
			throw new ApplicationException("Stock inválido");
		}

		int sales = Console.readInteger("sales?");
		int regularity = Console.readInteger("regularity?");

		return new Magazine(name, stock, sales, regularity);
	}

	private Publication askForNewsPaper() throws ApplicationException {
		String name = Console.readString("name?");
		if (name.isBlank()) {// cadena
			tryAgainName(name);
			throw new ApplicationException("Cadena vacía");
		}

		int stock = Console.readInteger("stock?");// stock
		if (!isValidStock(stock)) {
			tryAgainStock(stock);
			throw new ApplicationException("Stock inválido");
		}

		int sales = Console.readInteger("sales?");

		return new Newspaper(name, stock, sales);
	}

	/**
	 * Método que pide otro nombre en caso de que sea vacío
	 * @param name
	 * @return
	 */
	private String tryAgainName(String name) {
		do {
			name = Console.readString("name?");
		} while (name.isBlank());
		return name;
	}

	/**
	 * Método que pide otro stock hasta que cumpla las condiciones
	 * @param stock
	 * @return
	 */
	private int tryAgainStock(int stock) {
		do {
			stock = Console.readInteger("stock?");
		} while (!isValidStock(stock));
		return stock;
	}

	/**
	 * Método que comprueba que el stock es válido
	 * @param stock
	 * @return
	 */
	private boolean isValidStock(int stock) {
		return stock >= 0 && stock <= 100;
	}
}
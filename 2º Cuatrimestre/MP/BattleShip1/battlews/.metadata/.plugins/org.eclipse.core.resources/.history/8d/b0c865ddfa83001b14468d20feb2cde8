/**
 * 
 */
package mp.battleship.sprint1.skeleton.board.tests;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import uo.mp.battleship.board.Board;
import uo.mp.battleship.board.BoardBuilder;
import uo.mp.battleship.board.Coordinate;
import uo.mp.battleship.game.Game;
import uo.mp.battleship.player.ComputerPlayer;
import uo.mp.battleship.player.HumanPlayer;

/**
 * @author blanc
 *
 */
class ShootAtTest {

	/**
	 * Casos:
	 * 
	 * 1 Al disparar a una casilla no disparada y sin barco,
	 *   devuelve false y la casilla se marca como -10
	 * 2 Al disparar a una casilla ya disparada y sin barco,
	 * 	 devuelve false y la casilla sigue como -10
	 * 3 Después de disparar a una casilla con un barco,
	 * 	 devuelve true y pone la casilla a su valor negativo
	 * 4 Después de disparar a una casilla disparada con un barco,
	 *   devuelve true y su valor permanece igual
	 */
		Board humanBoard = new Board(10);
		HumanPlayer human = new HumanPlayer("user");
		
		BoardBuilder computerBoard = new BoardBuilder();
		ComputerPlayer computer = new ComputerPlayer("computer");
		Game game = new Game(human, computer);
	

	/**
	 * GIVEN Un objeto array (tablero)
	 * WHEN se dispara a una casilla no disparada y sin barco
	 * THEN devuelve false y la casilla se marca como -10
	 */
	@Test
	void testShootAt1() {
		Coordinate c1 = new Coordinate('B', 8);
		int x = c1.getCol();
		int y = c1.getRow();
		assertEquals(-10, humanBoard.getGridStatus(y-1, x-1));
		assertEquals(false, human.shootAt(c1));
		 
		
		
	}

}

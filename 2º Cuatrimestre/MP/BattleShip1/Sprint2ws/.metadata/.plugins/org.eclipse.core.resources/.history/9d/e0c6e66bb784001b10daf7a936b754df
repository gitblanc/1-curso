/**
 * 
 */
package mp.battleship.sprint1.skeleton.board.tests;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import board.Board;
import board.Coordinate;

/**
 * @author blanc
 *
 */
class TestGetNotFiredCoordinates {


	/**
	 * Casos
	 * 
	 * 1 Un tablero sin haber sido usado, devuelve todas las casillas
	 * 2 Un tablero sin haber sido usado aún y después de disparar
	 *   una casilla que no ha sido disparada aún, devuelve todas las
	 *   casillas salvo la disparada
	 * 3 Retorna lo mismo que el anterior, después de disparar una 
	 *   casilla que ya había sido disparada
	 */
	
	/**
	 * GIVEN un tablero sin haber sido usado aún
	 * WHEN
	 * THEN devuelve todas las casillas
	 */
	@Test
	void testGetNotFiredCoordinates1() {
		Board humanPlayer = new Board(10);
		assertEquals(100, humanPlayer.getNotFiredCoordinate().size());
	}
	
	/**
	 * GIVEN un tablero sin haber sido usado aún
	 * WHEN después de disparar una casilla que 
	 * no ha sido disparada aún
	 * THEN devuelve todas las
	 *   casillas salvo la disparada
	 */
	@Test
	void testGetNotFiredCoordinates2() {
		Board humanPlayer = new Board(10);
		Coordinate c1 = new Coordinate('C', 1);
		humanPlayer.shootAt(c1);
		assertEquals(99, humanPlayer.getNotFiredCoordinate().size());
	}
	
	/**
	 * GIVEN un tablero sin haber sido usado aún
	 * WHEN después de disparar una 
	 *   casilla que ya había sido disparada
	 * THEN devuelve todas las
	 *   casillas salvo la disparada
	 */
	@Test
	void testGetNotFiredCoordinates3() {
		Board humanPlayer = new Board(10);
		Coordinate c1 = new Coordinate('C', 1);
		humanPlayer.shootAt(c1);
		humanPlayer.shootAt(c1);
		assertEquals(99, humanPlayer.getNotFiredCoordinate().size());
	}

}


package board;

import java.util.List;

import squares.Ship;
import squares.Water;
import uo.mp2021.util.checks.ArgumentChecks;

public class BoardBuilder {
	public static final int MIN_SIZE = 10;
	public static final int MAX_SIZE = 15;

	private int size;	

	private List<Ship> ships;
	/**
	 * Almacena en el atributo size de la clase, el tamaño del array que se va a
	 * crear con el valor que recibe como parámetro. Devuelve el propio objeto
	 * BoardBuilder.
	 * 
	 * @param size
	 * @return
	 */
	public BoardBuilder of(int size) {
		setSize(size);
		return this;
	}
	
	public BoardBuilder forFleet(List<Ship> fleet) {
		ArgumentChecks.isTrue(fleet != null);
		this.ships = fleet;
		return this;
		
	}
	
	

	/**
	 * Devuelve un nuevo array cuadrado de enteros con el contenido fijo que se
	 * muestra en Array 1. Debería estar invocado antes el
	 * método of para dar un valor correcto al atributo size. Si no se ha realizado
	 * esto, se deberá lanzar una IllegalStateException
	 * 
	 * @return
	 */
	public Square[][] build() {
		Square[][] arrayInicial = new Square[MIN_SIZE][MIN_SIZE];
		Ship sub1 = new Ship(1);
		Ship sub2 = new Ship(1);
		Ship sub3 = new Ship(1);
		Ship sub4 = new Ship(1);
		
		Ship destr1 = new Ship(2);
		Ship destr2 = new Ship(2);
		Ship destr3 = new Ship(2);
		
		Ship cruise2 = new Ship(3);
		Ship cruise1 = new Ship(3);
		
		Ship battleShip = new Ship(4);
		
		arrayInicial[0][0] = new Square(sub1);
		arrayInicial[0][2] = new Square(sub2);
		arrayInicial[0][4] = new Square(sub3);
		arrayInicial[0][6] = new Square(sub4);

		arrayInicial[2][0] = new Square(destr1);
		arrayInicial[2][1] = new Square(destr1);
		arrayInicial[2][3] = new Square(destr2);
		arrayInicial[2][4] = new Square(destr2);
		arrayInicial[2][6] = new Square(destr3);
		arrayInicial[2][7] = new Square(destr3);

		arrayInicial[4][0] = new Square(cruise1);
		arrayInicial[4][1] = new Square(cruise1);
		arrayInicial[4][2] = new Square(cruise1);
		arrayInicial[4][4] = new Square(cruise2);
		arrayInicial[4][5] = new Square(cruise2);
		arrayInicial[4][6] = new Square(cruise2);

		arrayInicial[6][4] = new Square(battleShip);
		arrayInicial[6][5] = new Square(battleShip);
		arrayInicial[6][6] = new Square(battleShip);
		arrayInicial[6][7] = new Square(battleShip);

		
		fillWithWater(arrayInicial);
		
		
		return arrayInicial;
	}
	
	private void fillWithWater(Square[][] array) {
		for(int i = 0; i < array.length; i++) {
			for(int j = 0; j < array[i].length; j++) {
				array[i][j] = new Square(new Water());
			}
		}
	}

	private void setSize(int size) {
		if (size >= MIN_SIZE && size <= MAX_SIZE) {
			this.size = size;
		} else {
			this.size = MIN_SIZE;
		}
	}

	/**
	 * @return the ships
	 */
	public List<Ship> getShips() {
		return ships;
	}
	
	/**
	 * 
	 * @return the size
	 */
	public int getSize() {
		return size;
	}

}
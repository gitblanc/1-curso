/* The following code was generated by JFlex 1.7.0 */

/* Fichero: ejemplo.lex */
package lexico;
import java.io.InputStreamReader;
import java.lang.System;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>aemede.lex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\51\1\51\1\51\1\51\22\0\1\31\1\0\1\32\4\0"+
    "\1\33\1\27\1\30\1\25\1\20\1\22\1\21\1\13\1\26\1\3"+
    "\5\42\4\34\1\52\1\43\1\0\1\53\2\0\1\5\1\35\1\36"+
    "\2\4\1\37\3\4\1\37\3\40\2\4\1\2\5\4\1\1\5\4"+
    "\1\44\1\0\1\45\1\0\1\24\1\0\2\23\1\16\1\23\1\14"+
    "\1\50\2\23\1\10\3\41\1\17\1\7\1\11\1\46\1\23\1\47"+
    "\1\15\1\23\1\6\1\12\4\23\12\0\1\51\u1fa2\0\1\51\1\51"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\1\3\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\5\1\1\3\1\13\1\1"+
    "\1\3\1\14\1\1\10\0\1\2\1\0\1\15\6\3"+
    "\2\2\3\0\1\16\1\0\1\17\2\0\1\3\2\0"+
    "\1\3\1\20\6\0\1\2\1\0\3\3\1\2\1\0"+
    "\1\21\1\0\1\22\2\0\1\3\2\0\1\23\1\0"+
    "\1\24\1\0\1\25\1\0\1\2\1\0\1\25\3\3"+
    "\1\0\2\26\5\0\3\3\1\0\1\26\1\0\1\26"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\30\1\3"+
    "\1\0\3\26\2\0\1\31\1\27\1\0\1\27\1\32"+
    "\1\27\1\33\3\26\2\0\1\27\1\0\1\27\1\0"+
    "\1\27\3\26\5\0\1\26\5\0\1\26\1\0\1\34"+
    "\1\0\1\32\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\54\0\u01e4\0\u0210\0\54\0\54"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\54\0\u0344"+
    "\0\u0370\0\54\0\u039c\0\334\0\u03c8\0\u03f4\0\u0420\0\u044c"+
    "\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac"+
    "\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c"+
    "\0\u023c\0\54\0\u0268\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\54\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0210\0\54\0\u02c0\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0134\0\u0b84\0\334\0\u0bb0\0\u08f0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u09a0\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68"+
    "\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u0134\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c"+
    "\0\u1188\0\54\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u0134"+
    "\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\334\0\u136c\0\u044c"+
    "\0\u1398\0\u0580\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0"+
    "\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600"+
    "\0\u162c\0\u1658\0\54\0\u1684\0\54\0\u16b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\2\10\1\2\4\10\1\12\1\13\1\2\1\10"+
    "\1\2\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\5\1\23\1\24\1\4\1\25\1\26\1\5\1\27"+
    "\1\30\1\2\2\10\1\31\1\32\1\33\1\2\55\0"+
    "\1\34\1\35\1\36\1\34\1\37\3\40\1\41\1\40"+
    "\1\42\4\40\3\0\1\40\10\0\1\36\4\34\1\40"+
    "\1\36\3\0\3\40\4\0\2\34\1\36\1\34\1\37"+
    "\5\40\1\42\4\40\3\0\1\40\10\0\1\36\4\34"+
    "\1\40\1\36\3\0\3\40\4\0\2\43\1\44\1\43"+
    "\1\0\5\45\1\0\4\45\2\0\1\46\1\45\10\0"+
    "\1\44\4\43\1\45\1\44\3\0\3\45\4\0\4\34"+
    "\1\37\5\40\1\42\4\40\3\0\1\40\10\0\5\34"+
    "\1\40\1\34\3\0\3\40\4\0\1\47\1\50\2\47"+
    "\1\37\3\10\1\51\1\10\1\42\4\10\3\0\1\10"+
    "\1\52\7\0\5\47\1\10\1\47\3\0\3\10\4\0"+
    "\4\47\1\37\5\10\1\42\4\10\3\0\1\10\1\52"+
    "\7\0\5\47\1\10\1\47\3\0\3\10\4\0\4\47"+
    "\1\37\1\10\1\53\3\10\1\42\3\10\1\54\3\0"+
    "\1\10\1\52\7\0\5\47\1\10\1\47\3\0\3\10"+
    "\6\0\1\55\30\0\1\55\5\0\1\55\14\0\1\56"+
    "\30\0\1\56\5\0\1\56\37\0\1\57\30\0\1\60"+
    "\30\0\1\60\5\0\1\60\12\0\4\61\1\0\5\61"+
    "\1\0\6\61\1\0\1\61\1\0\5\61\1\62\1\0"+
    "\7\61\3\0\3\61\4\0\4\63\1\0\5\63\1\0"+
    "\6\63\1\0\1\63\1\0\5\63\1\0\1\62\7\63"+
    "\3\0\3\63\4\0\2\34\1\36\1\34\1\37\5\40"+
    "\1\42\4\40\3\0\1\40\10\0\1\64\2\65\2\34"+
    "\1\40\1\64\3\0\3\40\4\0\4\34\1\37\5\40"+
    "\1\42\4\40\3\0\1\40\10\0\1\64\2\65\2\34"+
    "\1\40\1\64\3\0\3\40\4\0\4\34\1\37\5\40"+
    "\1\42\4\40\3\0\1\40\10\0\4\34\1\66\1\40"+
    "\1\34\3\0\3\40\4\0\4\47\1\37\5\10\1\42"+
    "\4\10\3\0\1\10\1\52\7\0\5\47\1\67\1\47"+
    "\3\0\3\10\43\0\1\70\1\71\13\0\4\47\1\37"+
    "\2\10\1\72\2\10\1\42\4\10\3\0\1\10\1\52"+
    "\7\0\5\47\1\10\1\47\3\0\3\10\56\0\1\73"+
    "\1\0\2\34\1\74\1\34\1\37\5\40\1\42\4\40"+
    "\3\0\1\40\10\0\1\74\4\34\1\40\1\74\3\0"+
    "\3\40\4\0\2\34\1\75\1\34\1\37\5\40\1\42"+
    "\4\40\3\0\1\40\10\0\1\75\4\34\1\40\1\75"+
    "\3\0\3\40\11\0\1\76\46\0\4\40\1\37\5\77"+
    "\1\42\4\77\3\0\1\77\10\0\5\40\1\77\1\40"+
    "\3\0\3\77\4\0\2\40\1\100\1\40\1\37\5\77"+
    "\1\42\4\77\3\0\1\77\10\0\1\100\4\40\1\77"+
    "\1\100\3\0\3\77\4\0\4\101\1\0\5\101\1\0"+
    "\4\101\3\0\1\101\10\0\7\101\3\0\3\101\4\0"+
    "\4\43\1\0\5\45\1\0\4\45\3\0\1\45\10\0"+
    "\5\43\1\45\1\43\3\0\3\45\4\0\2\43\1\102"+
    "\1\43\1\0\5\45\1\0\4\45\2\0\1\46\1\45"+
    "\10\0\1\102\4\43\1\45\1\102\3\0\3\45\4\0"+
    "\4\45\1\0\5\103\1\0\4\103\3\0\1\103\10\0"+
    "\5\45\1\103\1\45\3\0\3\103\6\0\1\46\30\0"+
    "\1\46\5\0\1\46\12\0\4\47\1\37\5\47\1\42"+
    "\4\47\3\0\1\47\10\0\7\47\3\0\3\47\4\0"+
    "\2\47\1\104\1\47\1\37\5\47\1\42\4\47\3\0"+
    "\1\47\10\0\1\104\5\47\1\104\3\0\3\47\4\0"+
    "\2\47\1\104\1\47\1\37\5\10\1\42\4\10\3\0"+
    "\1\10\1\52\7\0\1\104\4\47\1\10\1\104\3\0"+
    "\3\10\4\0\4\52\1\0\5\52\1\0\4\52\3\0"+
    "\1\52\10\0\7\52\3\0\3\52\4\0\4\47\1\37"+
    "\2\10\1\105\2\10\1\42\4\10\3\0\1\10\1\52"+
    "\7\0\5\47\1\10\1\47\3\0\3\10\4\0\4\47"+
    "\1\37\5\10\1\42\4\10\3\0\1\10\1\52\7\0"+
    "\5\47\1\10\1\47\3\0\1\106\2\10\6\0\1\107"+
    "\15\0\1\110\1\46\11\0\1\107\5\0\1\107\14\0"+
    "\1\56\16\0\1\46\11\0\1\56\5\0\1\56\42\0"+
    "\1\111\25\0\1\60\15\0\1\112\6\0\1\113\3\0"+
    "\1\60\5\0\1\60\12\0\2\34\1\64\1\34\1\37"+
    "\5\40\1\42\4\40\3\0\1\40\10\0\1\64\4\34"+
    "\1\40\1\64\3\0\3\40\4\0\4\34\1\37\5\40"+
    "\1\42\4\40\3\0\1\40\10\0\1\34\2\114\2\34"+
    "\1\40\1\34\3\0\3\40\4\0\4\34\1\37\5\40"+
    "\1\42\4\40\3\0\1\40\10\0\4\34\1\115\1\40"+
    "\1\34\3\0\3\40\4\0\4\47\1\37\5\10\1\42"+
    "\4\10\3\0\1\10\1\52\7\0\5\47\1\116\1\47"+
    "\3\0\3\10\43\0\1\117\54\0\1\120\13\0\4\47"+
    "\1\37\1\10\1\121\3\10\1\42\4\10\3\0\1\10"+
    "\1\52\7\0\5\47\1\10\1\47\3\0\3\10\4\0"+
    "\2\34\1\122\1\34\1\37\5\40\1\42\4\40\3\0"+
    "\1\40\10\0\1\122\4\34\1\40\1\122\3\0\3\40"+
    "\4\0\2\34\1\123\1\34\1\37\5\40\1\42\4\40"+
    "\3\0\1\40\10\0\1\123\4\34\1\40\1\123\3\0"+
    "\3\40\12\0\1\124\45\0\2\77\1\125\1\77\1\37"+
    "\5\101\1\42\4\101\3\0\1\101\10\0\5\77\1\101"+
    "\1\77\3\0\3\101\4\0\2\40\1\126\1\40\1\37"+
    "\5\77\1\42\4\77\3\0\1\77\10\0\1\126\4\40"+
    "\1\77\1\126\3\0\3\77\4\0\4\101\1\37\5\101"+
    "\1\42\4\101\3\0\1\101\10\0\7\101\3\0\3\101"+
    "\4\0\2\43\1\127\1\43\1\0\5\45\1\0\4\45"+
    "\1\0\1\130\1\46\1\45\10\0\1\127\4\43\1\45"+
    "\1\127\3\0\3\45\4\0\2\103\1\131\1\103\27\0"+
    "\5\103\1\0\1\103\12\0\2\47\1\132\1\47\1\37"+
    "\5\47\1\42\4\47\3\0\1\47\10\0\1\132\5\47"+
    "\1\132\3\0\3\47\4\0\4\47\1\37\5\10\1\42"+
    "\2\10\1\133\1\10\3\0\1\10\1\52\7\0\5\47"+
    "\1\10\1\47\3\0\3\10\4\0\4\47\1\37\5\10"+
    "\1\42\4\10\3\0\1\10\1\52\7\0\5\47\1\10"+
    "\1\47\3\0\1\10\1\134\1\10\6\0\1\56\15\0"+
    "\1\110\1\46\11\0\1\56\5\0\1\56\14\0\1\135"+
    "\30\0\1\135\5\0\1\135\12\0\4\111\1\0\5\111"+
    "\1\0\6\111\1\0\1\111\1\0\5\111\2\0\7\111"+
    "\3\0\3\111\4\0\4\34\1\37\5\40\1\42\4\40"+
    "\3\0\1\40\10\0\5\34\1\40\1\136\3\0\3\40"+
    "\4\0\4\47\1\37\5\10\1\42\4\10\3\0\1\10"+
    "\1\52\7\0\5\47\1\10\1\137\3\0\3\10\43\0"+
    "\1\140\54\0\1\140\13\0\2\34\1\141\1\34\1\37"+
    "\5\40\1\42\4\40\3\0\1\40\10\0\1\141\4\34"+
    "\1\40\1\141\3\0\3\40\13\0\1\142\44\0\2\40"+
    "\1\143\1\40\1\37\5\77\1\42\4\77\3\0\1\77"+
    "\10\0\1\143\4\40\1\77\1\143\3\0\3\77\4\0"+
    "\2\43\1\127\1\43\1\0\5\45\1\0\4\45\2\0"+
    "\1\46\1\45\10\0\1\127\4\43\1\45\1\127\3\0"+
    "\3\45\6\0\1\144\30\0\1\144\5\0\1\144\12\0"+
    "\2\47\1\145\1\47\1\37\5\47\1\42\4\47\3\0"+
    "\1\47\10\0\1\145\5\47\1\145\3\0\3\47\4\0"+
    "\4\47\1\37\2\10\1\146\2\10\1\42\4\10\3\0"+
    "\1\10\1\52\7\0\5\47\1\10\1\47\3\0\3\10"+
    "\4\0\4\47\1\37\2\10\1\147\2\10\1\42\4\10"+
    "\3\0\1\10\1\52\7\0\5\47\1\10\1\47\3\0"+
    "\3\10\6\0\1\150\30\0\1\150\5\0\1\150\12\0"+
    "\4\34\1\37\5\40\1\42\4\40\3\0\1\40\10\0"+
    "\5\34\1\40\1\151\1\152\2\0\3\40\4\0\4\47"+
    "\1\37\5\47\1\42\4\47\3\0\1\47\10\0\6\47"+
    "\1\153\1\152\2\0\3\47\45\0\1\154\12\0\2\34"+
    "\1\155\1\34\1\37\5\40\1\42\4\40\3\0\1\40"+
    "\10\0\1\155\4\34\1\40\1\155\3\0\3\40\14\0"+
    "\1\156\43\0\2\40\1\157\1\40\1\37\5\77\1\42"+
    "\4\77\3\0\1\77\10\0\1\157\4\40\1\77\1\157"+
    "\3\0\3\77\6\0\1\160\30\0\1\160\5\0\1\160"+
    "\12\0\2\47\1\161\1\47\1\37\5\47\1\42\4\47"+
    "\3\0\1\47\10\0\1\161\5\47\1\161\3\0\3\47"+
    "\4\0\4\47\1\37\3\10\1\162\1\10\1\42\4\10"+
    "\3\0\1\10\1\52\7\0\5\47\1\10\1\47\3\0"+
    "\3\10\4\0\4\47\1\37\5\10\1\42\3\10\1\163"+
    "\3\0\1\10\1\52\7\0\5\47\1\10\1\47\3\0"+
    "\3\10\6\0\1\164\30\0\1\164\5\0\1\164\12\0"+
    "\4\34\1\37\5\40\1\42\4\40\3\0\1\40\10\0"+
    "\5\34\1\40\1\165\1\152\2\0\3\40\45\0\1\166"+
    "\12\0\4\47\1\37\5\47\1\42\4\47\3\0\1\47"+
    "\10\0\6\47\1\167\1\152\2\0\3\47\45\0\1\170"+
    "\1\171\1\0\1\172\7\0\2\34\1\173\1\34\1\37"+
    "\5\40\1\42\4\40\3\0\1\40\10\0\1\173\4\34"+
    "\1\40\1\173\3\0\3\40\15\0\1\174\42\0\2\40"+
    "\1\175\1\40\1\37\5\77\1\42\4\77\3\0\1\77"+
    "\10\0\1\175\4\40\1\77\1\175\3\0\3\77\6\0"+
    "\1\176\30\0\1\176\5\0\1\176\12\0\2\47\1\177"+
    "\1\47\1\37\5\47\1\42\4\47\3\0\1\47\10\0"+
    "\1\177\5\47\1\177\3\0\3\47\4\0\4\47\1\37"+
    "\5\10\1\42\1\200\3\10\3\0\1\10\1\52\7\0"+
    "\5\47\1\10\1\47\3\0\3\10\24\0\1\130\33\0"+
    "\4\34\1\37\5\40\1\42\4\40\3\0\1\40\10\0"+
    "\5\34\1\40\1\201\1\152\2\0\3\40\45\0\1\202"+
    "\1\152\11\0\4\47\1\37\5\47\1\42\4\47\3\0"+
    "\1\47\10\0\6\47\1\203\1\152\2\0\3\47\45\0"+
    "\1\204\1\171\1\0\1\172\50\0\1\205\12\0\2\34"+
    "\1\206\1\34\1\37\5\40\1\42\4\40\3\0\1\40"+
    "\10\0\1\206\4\34\1\40\1\206\3\0\3\40\13\0"+
    "\1\207\44\0\2\40\1\210\1\40\1\37\5\77\1\42"+
    "\4\77\3\0\1\77\10\0\1\210\4\40\1\77\1\210"+
    "\3\0\3\77\24\0\1\211\33\0\2\47\1\212\1\47"+
    "\1\37\5\47\1\42\4\47\3\0\1\47\10\0\1\212"+
    "\5\47\1\212\3\0\3\47\4\0\4\34\1\37\5\40"+
    "\1\42\4\40\3\0\1\40\10\0\5\34\1\40\1\213"+
    "\1\152\2\0\3\40\45\0\1\214\1\152\11\0\4\47"+
    "\1\37\5\47\1\42\4\47\3\0\1\47\10\0\6\47"+
    "\1\215\1\152\2\0\3\47\45\0\1\216\1\171\1\0"+
    "\1\172\37\0\1\217\10\0\1\220\24\0\1\221\43\0"+
    "\1\222\30\0\1\222\5\0\1\222\12\0\4\34\1\37"+
    "\5\40\1\42\4\40\3\0\1\40\10\0\5\34\1\40"+
    "\1\34\1\152\2\0\3\40\45\0\1\223\1\152\11\0"+
    "\4\47\1\37\5\47\1\42\4\47\3\0\1\47\10\0"+
    "\7\47\1\152\2\0\3\47\45\0\1\224\1\171\1\0"+
    "\1\172\37\0\1\217\6\0\1\70\1\71\43\0\1\217"+
    "\10\0\1\225\25\0\1\226\1\0\1\227\40\0\1\230"+
    "\30\0\1\230\5\0\1\230\53\0\1\231\1\152\53\0"+
    "\1\171\1\0\1\172\37\0\1\217\10\0\1\232\26\0"+
    "\1\233\47\0\1\234\45\0\1\235\30\0\1\235\5\0"+
    "\1\235\54\0\1\152\41\0\1\217\10\0\1\236\30\0"+
    "\1\233\65\0\1\217\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5852];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\2\1\2\11\6\1\1\11"+
    "\2\1\1\11\1\1\10\0\1\1\1\0\11\1\3\0"+
    "\1\11\1\0\1\1\2\0\1\1\2\0\1\1\1\11"+
    "\6\0\1\1\1\0\4\1\1\0\1\1\1\0\1\11"+
    "\2\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\2\1\5\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\2\0\1\11\1\1\1\0"+
    "\7\1\2\0\1\1\1\0\1\1\1\0\4\1\5\0"+
    "\1\1\5\0\1\1\1\0\1\11\1\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(" ERROR_Lexico");
            } 
            // fall through
          case 29: break;
          case 2: 
            { System.out.print("Entero("+yytext()+")");
            } 
            // fall through
          case 30: break;
          case 3: 
            { System.out.print("Variable("+yytext()+")");
            } 
            // fall through
          case 31: break;
          case 4: 
            { System.out.print("Mas");
            } 
            // fall through
          case 32: break;
          case 5: 
            { System.out.print("Menos");
            } 
            // fall through
          case 33: break;
          case 6: 
            { System.out.print("Por");
            } 
            // fall through
          case 34: break;
          case 7: 
            { System.out.print("Entre");
            } 
            // fall through
          case 35: break;
          case 8: 
            { System.out.print("Abre-Par");
            } 
            // fall through
          case 36: break;
          case 9: 
            { System.out.print("Cierra-Par");
            } 
            // fall through
          case 37: break;
          case 10: 
            { 
            } 
            // fall through
          case 38: break;
          case 11: 
            { System.out.print("FinSentencia");
            } 
            // fall through
          case 39: break;
          case 12: 
            { System.out.print(yytext());
            } 
            // fall through
          case 40: break;
          case 13: 
            { System.out.print("Real("+yytext()+")");
            } 
            // fall through
          case 41: break;
          case 14: 
            { System.out.print(" Cadena("+yytext()+")");
            } 
            // fall through
          case 42: break;
          case 15: 
            { System.out.print("Numerochasis("+yytext()+")");
            } 
            // fall through
          case 43: break;
          case 16: 
            { System.out.print("Asigna");
            } 
            // fall through
          case 44: break;
          case 17: 
            { System.out.print("Comentario("+yytext()+")");
            } 
            // fall through
          case 45: break;
          case 18: 
            { System.out.print("GrupoCuentas("+yytext()+")");
            } 
            // fall through
          case 46: break;
          case 19: 
            { System.out.print("Palabra_reservada(fin)");
            } 
            // fall through
          case 47: break;
          case 20: 
            { System.out.print("EstadosUnidos("+yytext()+")");
            } 
            // fall through
          case 48: break;
          case 21: 
            { System.out.print("CuentaEmpresa("+yytext()+")");
            } 
            // fall through
          case 49: break;
          case 22: 
            { System.out.print("Ejercicio1("+yytext()+")");
            } 
            // fall through
          case 50: break;
          case 23: 
            { System.out.print("Uo");
            } 
            // fall through
          case 51: break;
          case 24: 
            { System.out.print("Palabra_reservada(inicio)");
            } 
            // fall through
          case 52: break;
          case 25: 
            { System.out.print("Ejercicio2("+yytext()+")");
            } 
            // fall through
          case 53: break;
          case 26: 
            { System.out.print("Telefono("+yytext()+")");
            } 
            // fall through
          case 54: break;
          case 27: 
            { System.out.print("Palabra_reservada(imprime)");
            } 
            // fall through
          case 55: break;
          case 28: 
            { System.out.print("Correo correcto");
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

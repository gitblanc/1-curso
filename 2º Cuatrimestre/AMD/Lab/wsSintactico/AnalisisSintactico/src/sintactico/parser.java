
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import lexico.Yylex;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\007\005\000\002\007\005\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\003\000\002\012" +
    "\004\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\004\005\001\002\000\004\002\066\001" +
    "\002\000\006\006\013\026\011\001\002\000\004\010\ufffb" +
    "\001\002\000\010\005\ufffe\006\ufffe\026\ufffe\001\002\000" +
    "\004\010\065\001\002\000\006\007\061\011\062\001\002" +
    "\000\010\005\060\006\013\026\011\001\002\000\020\012" +
    "\027\013\022\016\015\026\017\027\025\030\023\031\020" +
    "\001\002\000\004\010\ufffc\001\002\000\016\012\027\013" +
    "\022\016\015\026\017\027\025\030\023\001\002\000\004" +
    "\010\ufff6\001\002\000\032\010\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\054\001\002\000\004\010\ufff7\001\002\000" +
    "\030\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002\000" +
    "\016\012\027\013\022\016\015\026\017\027\025\030\023" +
    "\001\002\000\030\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\001\002\000\030\010\uffee\012\uffee\013\uffee\014\044\015" +
    "\045\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\001\002\000\030\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\001\002\000\022\010\ufff8\012\032\013\034\020\037\021" +
    "\036\022\031\023\035\024\033\001\002\000\016\012\027" +
    "\013\022\016\015\026\017\027\025\030\023\001\002\000" +
    "\030\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\001\002\000" +
    "\016\012\027\013\022\016\015\026\017\027\025\030\023" +
    "\001\002\000\016\012\027\013\022\016\015\026\017\027" +
    "\025\030\023\001\002\000\016\012\027\013\022\016\015" +
    "\026\017\027\025\030\023\001\002\000\016\012\027\013" +
    "\022\016\015\026\017\027\025\030\023\001\002\000\016" +
    "\012\027\013\022\016\015\026\017\027\025\030\023\001" +
    "\002\000\016\012\027\013\022\016\015\026\017\027\025" +
    "\030\023\001\002\000\016\012\027\013\022\016\015\026" +
    "\017\027\025\030\023\001\002\000\010\010\ufff5\012\032" +
    "\013\034\001\002\000\010\010\ufff3\012\032\013\034\001" +
    "\002\000\010\010\ufff4\012\032\013\034\001\002\000\030" +
    "\010\uffef\012\uffef\013\uffef\014\044\015\045\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\001\002\000\016" +
    "\012\027\013\022\016\015\026\017\027\025\030\023\001" +
    "\002\000\016\012\027\013\022\016\015\026\017\027\025" +
    "\030\023\001\002\000\030\010\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\001\002\000\030\010\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\001\002\000\010\010\ufff2\012\032\013\034\001" +
    "\002\000\030\010\ufff0\012\ufff0\013\ufff0\014\044\015\045" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\001" +
    "\002\000\010\010\ufff1\012\032\013\034\001\002\000\030" +
    "\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\001\002\000\030" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\001\002\000\010" +
    "\012\032\013\034\017\056\001\002\000\030\010\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\001\002\000\010\005\uffff\006" +
    "\uffff\026\uffff\001\002\000\004\002\000\001\002\000\016" +
    "\012\027\013\022\016\015\026\017\027\025\030\023\001" +
    "\002\000\016\012\027\013\022\016\015\026\017\027\025" +
    "\030\023\001\002\000\010\010\ufff9\012\032\013\034\001" +
    "\002\000\010\010\ufffa\012\032\013\034\001\002\000\010" +
    "\005\ufffd\006\ufffd\026\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\011\004\006\005\007\006\013\007\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\056\005\007\006\013\007\005" +
    "\001\001\000\012\010\025\011\023\012\020\013\015\001" +
    "\001\000\002\001\001\000\010\010\054\011\023\012\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\027\001\001\000\002\001\001\000\010" +
    "\010\051\011\023\012\020\001\001\000\006\011\050\012" +
    "\020\001\001\000\010\010\047\011\023\012\020\001\001" +
    "\000\006\011\042\012\020\001\001\000\010\010\041\011" +
    "\023\012\020\001\001\000\010\010\040\011\023\012\020" +
    "\001\001\000\010\010\037\011\023\012\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\046\001\001\000\004\012\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\063\011\023\012" +
    "\020\001\001\000\010\010\062\011\023\012\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    NewHashMap table = new NewHashMap();
   public static void main(String args[]) throws Exception {
		      parser p = new parser(new Yylex(new FileReader(args[0])));
		      Nodo root = (Nodo)p.parse().value;
		      System.out.println("\n\nAnalisis sintactico: ");
		      System.out.println("-----------------------------------------");
		      root.printTree(0, false, "");
    } // End Main
                            
	public parser (java.io.Reader input) { super(new lexico.Yylex(input)); }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= inicio BLOQUE fin 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nodo("programa", izda); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= BLOQUE INSTRUCCION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("bloque", izda, dcha); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= INSTRUCCION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("bloque", izda); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= SENTENCIA fin_sent 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nodo("instruccion", izda); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("sentencia", izda); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("sentencia", izda); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= variable asigna EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String izda = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				table.put(izda, dcha.getValor());
				RESULT = new Nodo("Asignacion", new Nodo("Variable " + izda, dcha));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= variable masigual EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String izda = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				table.put(izda, dcha.getValor() + table.get(izda));
				RESULT = new Nodo("Adicion", new Nodo("Variable " + izda, dcha));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPRIMIR ::= imprime EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("Imprimir " + izda.getValor(), izda); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPRIMIR ::= imprime cadena 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				RESULT = new Nodo("Imprimir " + c);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPRIMIR ::= imprime BOOLEANO 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(izda.getValor().equals(0.0)){
                	RESULT = new Nodo("Imprimir " + "True", izda);
                }else{
                	RESULT = new Nodo("Imprimir " + "False", izda);
                }
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BOOLEANO ::= EXPRESION mayor EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								boolean cond = izda.getValor() > dcha.getValor();
								if(cond){
									Double num = 0.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Mayor que ", izda, dcha) );
                                }else{
                                	Double num = 1.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Mayor que ", izda, dcha) );
                                }
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BOOLEANO ::= EXPRESION mayoroigual EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								boolean cond = izda.getValor() >= dcha.getValor();
								if(cond){
									Double num = 0.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Mayor o igual ", izda, dcha) );
                                }else{
                                	Double num = 1.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Mayor o igual ", izda, dcha) );
                                }
                                
                                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BOOLEANO ::= EXPRESION menor EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								boolean cond = izda.getValor() < dcha.getValor();
								if(cond){
									Double num = 0.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Menor que ", izda, dcha) );
                                }else{
                                	Double num = 1.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Menor que ", izda, dcha) );
                                }
                                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BOOLEANO ::= EXPRESION menoroigual EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								boolean cond = izda.getValor() <= dcha.getValor();
								if(cond){
									Double num = 0.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Menor o igual ", izda, dcha) );
                                }else{
                                	Double num = 1.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Menor o igual ", izda, dcha) );
                                }
                                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BOOLEANO ::= EXPRESION igual EXPRESION 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								boolean cond = izda.getValor().equals(dcha.getValor());
								if(cond){
									Double num = 0.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Igual que ", izda, dcha) );
                                }else{
                                	Double num = 1.0;
                                	RESULT = new Nodo("Booleano " + num, num , new Nodo("Igual que ", izda, dcha) );
                                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION mas TERMINO 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Double suma = izda.getValor() + dcha.getValor();
								RESULT = new Nodo("Expresion " + suma, suma , new Nodo("Mas ", izda, dcha) ); 
								
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION menos TERMINO 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Double resta = izda.getValor() - dcha.getValor();
                                RESULT = new Nodo("Expresion " + resta, resta , new Nodo("Menos ", izda, dcha) );
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= TERMINO 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = izda; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TERMINO ::= TERMINO por FACTOR 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Double mult = izda.getValor() * dcha.getValor();
								RESULT = new Nodo("Expresion " + mult, mult , new Nodo("Por ", izda, dcha) );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TERMINO ::= TERMINO entre FACTOR 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dcha = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Double division = izda.getValor() / dcha.getValor();
								RESULT = new Nodo("Expresion " + division, division , new Nodo("Entre ", izda, dcha) );
								
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TERMINO ::= FACTOR 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = izda; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FACTOR ::= variable masmas 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nodo("Variable " + v, table.get(v) + 1);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FACTOR ::= entero 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("Entero " + e, e); 

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FACTOR ::= real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("Real " + r, r); 
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FACTOR ::= abrepar EXPRESION cierrapar 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nodo("Parentesis ", (izda.getValor()), izda);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FACTOR ::= variable 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nodo("Variable " + v, table.get(v));
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= menos FACTOR 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						Double negativo = 0 - izda.getValor();
						RESULT = new Nodo("Signo menos " + negativo, negativo, izda);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= mas FACTOR 
            {
              Nodo RESULT =null;
		int izdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo izda = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						Double positivo = izda.getValor();
						RESULT = new Nodo("Signo mas " + positivo, positivo, izda);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
